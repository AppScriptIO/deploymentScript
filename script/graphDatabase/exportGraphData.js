"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.loadGraphDataFromFile = loadGraphDataFromFile;exports.exportGraphData = exportGraphData;

var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _fs = require("fs");
var _entity = require("@dependency/entity");
var _graphTraversal = require("@dependency/graphTraversal");

var _boltCypherModelAdapter = require("@dependency/graphTraversal/source/implementationPlugin/databaseModelAdapter/boltCypherModelAdapter.js");const { Database } = _graphTraversal.Database;

let concreteDatabaseBehavior = new Database.clientInterface({
  implementationList: { boltCypherModelAdapter: (0, _boltCypherModelAdapter.boltCypherModelAdapterFunction)() },
  defaultImplementation: 'boltCypherModelAdapter' });

let concereteDatabaseInstance = concreteDatabaseBehavior[_entity.Entity.reference.getInstanceOf](Database);
let concereteDatabase = concereteDatabaseInstance[Database.reference.key.getter]();

async function loadGraphDataFromFile({ api, shouldClearDatabase = false, graphDataFilePath } = {}) {
  (0, _assert.default)(graphDataFilePath, `• graphDataFilePath must be passed to script - ${graphDataFilePath}`);
  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  if (shouldClearDatabase) await clearDatabase();
  let absolutePath = _path.default.isAbsolute(graphDataFilePath) ? graphDataFilePath : _path.default.join(targetProjectRootPath, graphDataFilePath);
  let graphData = require(absolutePath);
  (0, _assert.default)(Array.isArray(graphData.node) && Array.isArray(graphData.edge), `• Unsupported graph data strcuture- ${graphData.edge} - ${graphData.node}`);
  await concereteDatabase.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
  concereteDatabase.driverInstance.close();
}


async function exportGraphData({ api, targetPath = './test/asset/', fileName = 'graphData.exported.json' } = {}) {var _node$edge;
  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  const exportPath = _path.default.normalize(_path.default.join(targetProjectRootPath, targetPath));
  let graphData = (_node$edge = { node: await concereteDatabase.getAllNode(), edge: await concereteDatabase.getAllEdge() }, JSON.stringify(_node$edge));
  await _fs.promises.writeFile(_path.default.join(exportPath, fileName), graphData, { encoding: 'utf8', flag: 'w' });
  console.log(`• Created json file - ${_path.default.join(exportPath, fileName)}`);
  concereteDatabase.driverInstance.close();
}

async function clearDatabase() {

  const graphDBDriver = concereteDatabase.driverInstance;
  let session = await graphDBDriver.session();
  await session.run(`match (n) detach delete n`);
  session.close();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NjcmlwdC9ncmFwaERhdGFiYXNlL2V4cG9ydEdyYXBoRGF0YS5qcyJdLCJuYW1lcyI6WyJEYXRhYmFzZSIsIkRhdGFiYXNlTW9kdWxlIiwiY29uY3JldGVEYXRhYmFzZUJlaGF2aW9yIiwiY2xpZW50SW50ZXJmYWNlIiwiaW1wbGVtZW50YXRpb25MaXN0IiwiYm9sdEN5cGhlck1vZGVsQWRhcHRlciIsImRlZmF1bHRJbXBsZW1lbnRhdGlvbiIsImNvbmNlcmV0ZURhdGFiYXNlSW5zdGFuY2UiLCJFbnRpdHkiLCJyZWZlcmVuY2UiLCJnZXRJbnN0YW5jZU9mIiwiY29uY2VyZXRlRGF0YWJhc2UiLCJrZXkiLCJnZXR0ZXIiLCJsb2FkR3JhcGhEYXRhRnJvbUZpbGUiLCJhcGkiLCJzaG91bGRDbGVhckRhdGFiYXNlIiwiZ3JhcGhEYXRhRmlsZVBhdGgiLCJ0YXJnZXRQcm9qZWN0Um9vdFBhdGgiLCJwcm9qZWN0IiwiY29uZmlndXJhdGlvbiIsImRpcmVjdG9yeSIsInJvb3QiLCJjbGVhckRhdGFiYXNlIiwiYWJzb2x1dGVQYXRoIiwicGF0aCIsImlzQWJzb2x1dGUiLCJqb2luIiwiZ3JhcGhEYXRhIiwicmVxdWlyZSIsIkFycmF5IiwiaXNBcnJheSIsIm5vZGUiLCJlZGdlIiwibG9hZEdyYXBoRGF0YSIsIm5vZGVFbnRyeURhdGEiLCJjb25uZWN0aW9uRW50cnlEYXRhIiwiZHJpdmVySW5zdGFuY2UiLCJjbG9zZSIsImV4cG9ydEdyYXBoRGF0YSIsInRhcmdldFBhdGgiLCJmaWxlTmFtZSIsImV4cG9ydFBhdGgiLCJub3JtYWxpemUiLCJnZXRBbGxOb2RlIiwiZ2V0QWxsRWRnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaWxlc3lzdGVtIiwid3JpdGVGaWxlIiwiZW5jb2RpbmciLCJmbGFnIiwiY29uc29sZSIsImxvZyIsImdyYXBoREJEcml2ZXIiLCJzZXNzaW9uIiwicnVuIl0sIm1hcHBpbmdzIjoiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0lBREEsTUFBTSxFQUFFQSxRQUFGLEtBQWVDLHdCQUFyQjs7QUFHQSxJQUFJQyx3QkFBd0IsR0FBRyxJQUFJRixRQUFRLENBQUNHLGVBQWIsQ0FBNkI7QUFDMURDLEVBQUFBLGtCQUFrQixFQUFFLEVBQUVDLHNCQUFzQixFQUFFLDZEQUExQixFQURzQztBQUUxREMsRUFBQUEscUJBQXFCLEVBQUUsd0JBRm1DLEVBQTdCLENBQS9COztBQUlBLElBQUlDLHlCQUF5QixHQUFHTCx3QkFBd0IsQ0FBQ00sZUFBT0MsU0FBUCxDQUFpQkMsYUFBbEIsQ0FBeEIsQ0FBeURWLFFBQXpELENBQWhDO0FBQ0EsSUFBSVcsaUJBQWlCLEdBQUdKLHlCQUF5QixDQUFDUCxRQUFRLENBQUNTLFNBQVQsQ0FBbUJHLEdBQW5CLENBQXVCQyxNQUF4QixDQUF6QixFQUF4Qjs7QUFFTyxlQUFlQyxxQkFBZixDQUFxQyxFQUFFQyxHQUFGLEVBQThCQyxtQkFBbUIsR0FBRyxLQUFwRCxFQUEyREMsaUJBQTNELEtBQWlGLEVBQXRILEVBQTBIO0FBQy9ILHVCQUFPQSxpQkFBUCxFQUEyQixrREFBaURBLGlCQUFrQixFQUE5RjtBQUNBLFFBQU1DLHFCQUFxQixHQUFHSCxHQUFHLENBQUNJLE9BQUosQ0FBWUMsYUFBWixDQUEwQkEsYUFBMUIsQ0FBd0NDLFNBQXhDLENBQWtEQyxJQUFoRjtBQUNBLE1BQUlOLG1CQUFKLEVBQXlCLE1BQU1PLGFBQWEsRUFBbkI7QUFDekIsTUFBSUMsWUFBWSxHQUFHQyxjQUFLQyxVQUFMLENBQWdCVCxpQkFBaEIsSUFBcUNBLGlCQUFyQyxHQUF5RFEsY0FBS0UsSUFBTCxDQUFVVCxxQkFBVixFQUFpQ0QsaUJBQWpDLENBQTVFO0FBQ0EsTUFBSVcsU0FBUyxHQUFHQyxPQUFPLENBQUNMLFlBQUQsQ0FBdkI7QUFDQSx1QkFBT00sS0FBSyxDQUFDQyxPQUFOLENBQWNILFNBQVMsQ0FBQ0ksSUFBeEIsS0FBaUNGLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxTQUFTLENBQUNLLElBQXhCLENBQXhDLEVBQXdFLHVDQUFzQ0wsU0FBUyxDQUFDSyxJQUFLLE1BQUtMLFNBQVMsQ0FBQ0ksSUFBSyxFQUFqSjtBQUNBLFFBQU1yQixpQkFBaUIsQ0FBQ3VCLGFBQWxCLENBQWdDLEVBQUVDLGFBQWEsRUFBRVAsU0FBUyxDQUFDSSxJQUEzQixFQUFpQ0ksbUJBQW1CLEVBQUVSLFNBQVMsQ0FBQ0ssSUFBaEUsRUFBaEMsQ0FBTjtBQUNBdEIsRUFBQUEsaUJBQWlCLENBQUMwQixjQUFsQixDQUFpQ0MsS0FBakM7QUFDRDs7O0FBR00sZUFBZUMsZUFBZixDQUErQixFQUFFeEIsR0FBRixFQUFPeUIsVUFBVSxHQUFHLGVBQXBCLEVBQXFDQyxRQUFRLEdBQUcseUJBQWhELEtBQThFLEVBQTdHLEVBQWlIO0FBQ3RILFFBQU12QixxQkFBcUIsR0FBR0gsR0FBRyxDQUFDSSxPQUFKLENBQVlDLGFBQVosQ0FBMEJBLGFBQTFCLENBQXdDQyxTQUF4QyxDQUFrREMsSUFBaEY7QUFDQSxRQUFNb0IsVUFBVSxHQUFHakIsY0FBS2tCLFNBQUwsQ0FBZWxCLGNBQUtFLElBQUwsQ0FBVVQscUJBQVYsRUFBaUNzQixVQUFqQyxDQUFmLENBQW5CO0FBQ0EsTUFBSVosU0FBUyxpQkFBRyxFQUFFSSxJQUFJLEVBQUUsTUFBTXJCLGlCQUFpQixDQUFDaUMsVUFBbEIsRUFBZCxFQUE4Q1gsSUFBSSxFQUFFLE1BQU10QixpQkFBaUIsQ0FBQ2tDLFVBQWxCLEVBQTFELEVBQUgsRUFBaUdDLElBQUksQ0FBQ0MsU0FBdEcsYUFBYjtBQUNBLFFBQU1DLGFBQVdDLFNBQVgsQ0FBcUJ4QixjQUFLRSxJQUFMLENBQVVlLFVBQVYsRUFBc0JELFFBQXRCLENBQXJCLEVBQXNEYixTQUF0RCxFQUFpRSxFQUFFc0IsUUFBUSxFQUFFLE1BQVosRUFBb0JDLElBQUksRUFBRSxHQUExQixFQUFqRSxDQUFOO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLHlCQUF3QjVCLGNBQUtFLElBQUwsQ0FBVWUsVUFBVixFQUFzQkQsUUFBdEIsQ0FBZ0MsRUFBckU7QUFDQTlCLEVBQUFBLGlCQUFpQixDQUFDMEIsY0FBbEIsQ0FBaUNDLEtBQWpDO0FBQ0Q7O0FBRUQsZUFBZWYsYUFBZixHQUErQjs7QUFFN0IsUUFBTStCLGFBQWEsR0FBRzNDLGlCQUFpQixDQUFDMEIsY0FBeEM7QUFDQSxNQUFJa0IsT0FBTyxHQUFHLE1BQU1ELGFBQWEsQ0FBQ0MsT0FBZCxFQUFwQjtBQUNBLFFBQU1BLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLDJCQUFiLENBQU47QUFDQUQsRUFBQUEsT0FBTyxDQUFDakIsS0FBUjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvZHVjZSBqc29uIGdyYXBoIGRhdGEgZnJvbSBkYXRhYmFzZSBxdWVyaWVzXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcbmltcG9ydCB7IHByb21pc2VzIGFzIGZpbGVzeXN0ZW0gfSBmcm9tICdmcydcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJ0BkZXBlbmRlbmN5L2VudGl0eSdcbmltcG9ydCB7IERhdGFiYXNlIGFzIERhdGFiYXNlTW9kdWxlIH0gZnJvbSAnQGRlcGVuZGVuY3kvZ3JhcGhUcmF2ZXJzYWwnXG5jb25zdCB7IERhdGFiYXNlIH0gPSBEYXRhYmFzZU1vZHVsZVxuaW1wb3J0IHsgYm9sdEN5cGhlck1vZGVsQWRhcHRlckZ1bmN0aW9uIH0gZnJvbSAnQGRlcGVuZGVuY3kvZ3JhcGhUcmF2ZXJzYWwvc291cmNlL2ltcGxlbWVudGF0aW9uUGx1Z2luL2RhdGFiYXNlTW9kZWxBZGFwdGVyL2JvbHRDeXBoZXJNb2RlbEFkYXB0ZXIuanMnXG5cbmxldCBjb25jcmV0ZURhdGFiYXNlQmVoYXZpb3IgPSBuZXcgRGF0YWJhc2UuY2xpZW50SW50ZXJmYWNlKHtcbiAgaW1wbGVtZW50YXRpb25MaXN0OiB7IGJvbHRDeXBoZXJNb2RlbEFkYXB0ZXI6IGJvbHRDeXBoZXJNb2RlbEFkYXB0ZXJGdW5jdGlvbigpIH0sXG4gIGRlZmF1bHRJbXBsZW1lbnRhdGlvbjogJ2JvbHRDeXBoZXJNb2RlbEFkYXB0ZXInLFxufSlcbmxldCBjb25jZXJldGVEYXRhYmFzZUluc3RhbmNlID0gY29uY3JldGVEYXRhYmFzZUJlaGF2aW9yW0VudGl0eS5yZWZlcmVuY2UuZ2V0SW5zdGFuY2VPZl0oRGF0YWJhc2UpXG5sZXQgY29uY2VyZXRlRGF0YWJhc2UgPSBjb25jZXJldGVEYXRhYmFzZUluc3RhbmNlW0RhdGFiYXNlLnJlZmVyZW5jZS5rZXkuZ2V0dGVyXSgpXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkR3JhcGhEYXRhRnJvbUZpbGUoeyBhcGkgLyoqc2NyaXB0TWFuYWdlciBhcGkqLywgc2hvdWxkQ2xlYXJEYXRhYmFzZSA9IGZhbHNlLCBncmFwaERhdGFGaWxlUGF0aCB9ID0ge30pIHtcbiAgYXNzZXJ0KGdyYXBoRGF0YUZpbGVQYXRoLCBg4oCiIGdyYXBoRGF0YUZpbGVQYXRoIG11c3QgYmUgcGFzc2VkIHRvIHNjcmlwdCAtICR7Z3JhcGhEYXRhRmlsZVBhdGh9YClcbiAgY29uc3QgdGFyZ2V0UHJvamVjdFJvb3RQYXRoID0gYXBpLnByb2plY3QuY29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9uLmRpcmVjdG9yeS5yb290XG4gIGlmIChzaG91bGRDbGVhckRhdGFiYXNlKSBhd2FpdCBjbGVhckRhdGFiYXNlKClcbiAgbGV0IGFic29sdXRlUGF0aCA9IHBhdGguaXNBYnNvbHV0ZShncmFwaERhdGFGaWxlUGF0aCkgPyBncmFwaERhdGFGaWxlUGF0aCA6IHBhdGguam9pbih0YXJnZXRQcm9qZWN0Um9vdFBhdGgsIGdyYXBoRGF0YUZpbGVQYXRoKVxuICBsZXQgZ3JhcGhEYXRhID0gcmVxdWlyZShhYnNvbHV0ZVBhdGgpXG4gIGFzc2VydChBcnJheS5pc0FycmF5KGdyYXBoRGF0YS5ub2RlKSAmJiBBcnJheS5pc0FycmF5KGdyYXBoRGF0YS5lZGdlKSwgYOKAoiBVbnN1cHBvcnRlZCBncmFwaCBkYXRhIHN0cmN1dHVyZS0gJHtncmFwaERhdGEuZWRnZX0gLSAke2dyYXBoRGF0YS5ub2RlfWApXG4gIGF3YWl0IGNvbmNlcmV0ZURhdGFiYXNlLmxvYWRHcmFwaERhdGEoeyBub2RlRW50cnlEYXRhOiBncmFwaERhdGEubm9kZSwgY29ubmVjdGlvbkVudHJ5RGF0YTogZ3JhcGhEYXRhLmVkZ2UgfSlcbiAgY29uY2VyZXRlRGF0YWJhc2UuZHJpdmVySW5zdGFuY2UuY2xvc2UoKVxufVxuXG4vLyBSZWxpZXMgb24gdGhlIGludGVyZmFjZSBmb3IgY29uY3JldGUgZGF0YWJhc2UgcGx1Z2lucyBvZiBncmFwaFRyYXZlcnNhbCBtb2R1bGUuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0R3JhcGhEYXRhKHsgYXBpLCB0YXJnZXRQYXRoID0gJy4vdGVzdC9hc3NldC8nLCBmaWxlTmFtZSA9ICdncmFwaERhdGEuZXhwb3J0ZWQuanNvbicgfSA9IHt9KSB7XG4gIGNvbnN0IHRhcmdldFByb2plY3RSb290UGF0aCA9IGFwaS5wcm9qZWN0LmNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbi5kaXJlY3Rvcnkucm9vdFxuICBjb25zdCBleHBvcnRQYXRoID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKHRhcmdldFByb2plY3RSb290UGF0aCwgdGFyZ2V0UGF0aCkpXG4gIGxldCBncmFwaERhdGEgPSB7IG5vZGU6IGF3YWl0IGNvbmNlcmV0ZURhdGFiYXNlLmdldEFsbE5vZGUoKSwgZWRnZTogYXdhaXQgY29uY2VyZXRlRGF0YWJhc2UuZ2V0QWxsRWRnZSgpIH0gfD4gSlNPTi5zdHJpbmdpZnlcbiAgYXdhaXQgZmlsZXN5c3RlbS53cml0ZUZpbGUocGF0aC5qb2luKGV4cG9ydFBhdGgsIGZpbGVOYW1lKSwgZ3JhcGhEYXRhLCB7IGVuY29kaW5nOiAndXRmOCcsIGZsYWc6ICd3JyAvKnRydWN0YWNlIGZpbGUgaWYgZXhpc3RzIGFuZCBjcmVhdGUgYSBuZXcgb25lKi8gfSlcbiAgY29uc29sZS5sb2coYOKAoiBDcmVhdGVkIGpzb24gZmlsZSAtICR7cGF0aC5qb2luKGV4cG9ydFBhdGgsIGZpbGVOYW1lKX1gKVxuICBjb25jZXJldGVEYXRhYmFzZS5kcml2ZXJJbnN0YW5jZS5jbG9zZSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyRGF0YWJhc2UoKSB7XG4gIC8vIERlbGV0ZSBhbGwgbm9kZXMgaW4gdGhlIGluLW1lbW9yeSBkYXRhYmFzZVxuICBjb25zdCBncmFwaERCRHJpdmVyID0gY29uY2VyZXRlRGF0YWJhc2UuZHJpdmVySW5zdGFuY2VcbiAgbGV0IHNlc3Npb24gPSBhd2FpdCBncmFwaERCRHJpdmVyLnNlc3Npb24oKVxuICBhd2FpdCBzZXNzaW9uLnJ1bihgbWF0Y2ggKG4pIGRldGFjaCBkZWxldGUgbmApXG4gIHNlc3Npb24uY2xvc2UoKVxufVxuIl19