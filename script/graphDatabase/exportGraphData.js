"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.loadGraphDataFromFile = loadGraphDataFromFile;exports.exportGraphData = exportGraphData;

var _path = _interopRequireDefault(require("path"));
var _fs = require("fs");
var _entity = require("@dependency/entity");
var _graph = require("@dependency/graph");

var _boltCypherModelAdapter = require("@dependency/graph/source/implementationPlugin/databaseModelAdapter/boltCypherModelAdapter.js");const { Database } = _graph.Database;

let concreteDatabaseBehavior = new Database.clientInterface({
  implementationList: { boltCypherModelAdapter: (0, _boltCypherModelAdapter.boltCypherModelAdapterFunction)() },
  defaultImplementation: 'boltCypherModelAdapter' });

let concereteDatabaseInstance = concreteDatabaseBehavior[_entity.Entity.reference.getInstanceOf](Database);
let concereteDatabase = concereteDatabaseInstance[Database.reference.key.getter]();

async function loadGraphDataFromFile({ api, shouldClearDatabase = false, graphDataFilePath } = {}) {
  if (shouldClearDatabase) await clearDatabase();
  let graphData = graphDataFilePath ? await _fs.promises.readFile(graphDataFilePath) : { node: [], edge: [] };
  await concereteDatabase.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
  concereteDatabase.driverInstance.close();
}


async function exportGraphData({ api, targetPath = './test/asset/', fileName = 'graphData.exported.json' } = {}) {var _node$edge;
  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  const exportPath = _path.default.normalize(_path.default.join(targetProjectRootPath, targetPath));
  let graphData = (_node$edge = { node: await concereteDatabase.getAllNode(), edge: await concereteDatabase.getAllEdge() }, JSON.stringify(_node$edge));
  await _fs.promises.writeFile(_path.default.join(exportPath, fileName), graphData, { encoding: 'utf8', flag: 'w' });
  console.log(`â€¢ Created json file - ${_path.default.join(exportPath, fileName)}`);
  concereteDatabase.driverInstance.close();
}

async function clearDatabase() {

  const graphDBDriver = concereteDatabase.driverInstance;
  let session = await graphDBDriver.session();
  await session.run(`match (n) detach delete n`);
  session.close();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NjcmlwdC9ncmFwaERhdGFiYXNlL2V4cG9ydEdyYXBoRGF0YS5qcyJdLCJuYW1lcyI6WyJEYXRhYmFzZSIsIkRhdGFiYXNlTW9kdWxlIiwiY29uY3JldGVEYXRhYmFzZUJlaGF2aW9yIiwiY2xpZW50SW50ZXJmYWNlIiwiaW1wbGVtZW50YXRpb25MaXN0IiwiYm9sdEN5cGhlck1vZGVsQWRhcHRlciIsImRlZmF1bHRJbXBsZW1lbnRhdGlvbiIsImNvbmNlcmV0ZURhdGFiYXNlSW5zdGFuY2UiLCJFbnRpdHkiLCJyZWZlcmVuY2UiLCJnZXRJbnN0YW5jZU9mIiwiY29uY2VyZXRlRGF0YWJhc2UiLCJrZXkiLCJnZXR0ZXIiLCJsb2FkR3JhcGhEYXRhRnJvbUZpbGUiLCJhcGkiLCJzaG91bGRDbGVhckRhdGFiYXNlIiwiZ3JhcGhEYXRhRmlsZVBhdGgiLCJjbGVhckRhdGFiYXNlIiwiZ3JhcGhEYXRhIiwiZmlsZXN5c3RlbSIsInJlYWRGaWxlIiwibm9kZSIsImVkZ2UiLCJsb2FkR3JhcGhEYXRhIiwibm9kZUVudHJ5RGF0YSIsImNvbm5lY3Rpb25FbnRyeURhdGEiLCJkcml2ZXJJbnN0YW5jZSIsImNsb3NlIiwiZXhwb3J0R3JhcGhEYXRhIiwidGFyZ2V0UGF0aCIsImZpbGVOYW1lIiwidGFyZ2V0UHJvamVjdFJvb3RQYXRoIiwicHJvamVjdCIsImNvbmZpZ3VyYXRpb24iLCJkaXJlY3RvcnkiLCJyb290IiwiZXhwb3J0UGF0aCIsInBhdGgiLCJub3JtYWxpemUiLCJqb2luIiwiZ2V0QWxsTm9kZSIsImdldEFsbEVkZ2UiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JpdGVGaWxlIiwiZW5jb2RpbmciLCJmbGFnIiwiY29uc29sZSIsImxvZyIsImdyYXBoREJEcml2ZXIiLCJzZXNzaW9uIiwicnVuIl0sIm1hcHBpbmdzIjoiOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNJQURBLE1BQU0sRUFBRUEsUUFBRixLQUFlQyxlQUFyQjs7QUFHQSxJQUFJQyx3QkFBd0IsR0FBRyxJQUFJRixRQUFRLENBQUNHLGVBQWIsQ0FBNkI7QUFDMURDLEVBQUFBLGtCQUFrQixFQUFFLEVBQUVDLHNCQUFzQixFQUFFLDZEQUExQixFQURzQztBQUUxREMsRUFBQUEscUJBQXFCLEVBQUUsd0JBRm1DLEVBQTdCLENBQS9COztBQUlBLElBQUlDLHlCQUF5QixHQUFHTCx3QkFBd0IsQ0FBQ00sZUFBT0MsU0FBUCxDQUFpQkMsYUFBbEIsQ0FBeEIsQ0FBeURWLFFBQXpELENBQWhDO0FBQ0EsSUFBSVcsaUJBQWlCLEdBQUdKLHlCQUF5QixDQUFDUCxRQUFRLENBQUNTLFNBQVQsQ0FBbUJHLEdBQW5CLENBQXVCQyxNQUF4QixDQUF6QixFQUF4Qjs7QUFFTyxlQUFlQyxxQkFBZixDQUFxQyxFQUFFQyxHQUFGLEVBQThCQyxtQkFBbUIsR0FBRyxLQUFwRCxFQUEyREMsaUJBQTNELEtBQWlGLEVBQXRILEVBQTBIO0FBQy9ILE1BQUlELG1CQUFKLEVBQXlCLE1BQU1FLGFBQWEsRUFBbkI7QUFDekIsTUFBSUMsU0FBUyxHQUFHRixpQkFBaUIsR0FBRyxNQUFNRyxhQUFXQyxRQUFYLENBQW9CSixpQkFBcEIsQ0FBVCxHQUFrRCxFQUFFSyxJQUFJLEVBQUUsRUFBUixFQUFZQyxJQUFJLEVBQUUsRUFBbEIsRUFBbkY7QUFDQSxRQUFNWixpQkFBaUIsQ0FBQ2EsYUFBbEIsQ0FBZ0MsRUFBRUMsYUFBYSxFQUFFTixTQUFTLENBQUNHLElBQTNCLEVBQWlDSSxtQkFBbUIsRUFBRVAsU0FBUyxDQUFDSSxJQUFoRSxFQUFoQyxDQUFOO0FBQ0FaLEVBQUFBLGlCQUFpQixDQUFDZ0IsY0FBbEIsQ0FBaUNDLEtBQWpDO0FBQ0Q7OztBQUdNLGVBQWVDLGVBQWYsQ0FBK0IsRUFBRWQsR0FBRixFQUFPZSxVQUFVLEdBQUcsZUFBcEIsRUFBcUNDLFFBQVEsR0FBRyx5QkFBaEQsS0FBOEUsRUFBN0csRUFBaUg7QUFDdEgsUUFBTUMscUJBQXFCLEdBQUdqQixHQUFHLENBQUNrQixPQUFKLENBQVlDLGFBQVosQ0FBMEJBLGFBQTFCLENBQXdDQyxTQUF4QyxDQUFrREMsSUFBaEY7QUFDQSxRQUFNQyxVQUFVLEdBQUdDLGNBQUtDLFNBQUwsQ0FBZUQsY0FBS0UsSUFBTCxDQUFVUixxQkFBVixFQUFpQ0YsVUFBakMsQ0FBZixDQUFuQjtBQUNBLE1BQUlYLFNBQVMsaUJBQUcsRUFBRUcsSUFBSSxFQUFFLE1BQU1YLGlCQUFpQixDQUFDOEIsVUFBbEIsRUFBZCxFQUE4Q2xCLElBQUksRUFBRSxNQUFNWixpQkFBaUIsQ0FBQytCLFVBQWxCLEVBQTFELEVBQUgsRUFBaUdDLElBQUksQ0FBQ0MsU0FBdEcsYUFBYjtBQUNBLFFBQU14QixhQUFXeUIsU0FBWCxDQUFxQlAsY0FBS0UsSUFBTCxDQUFVSCxVQUFWLEVBQXNCTixRQUF0QixDQUFyQixFQUFzRFosU0FBdEQsRUFBaUUsRUFBRTJCLFFBQVEsRUFBRSxNQUFaLEVBQW9CQyxJQUFJLEVBQUUsR0FBMUIsRUFBakUsQ0FBTjtBQUNBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSx5QkFBd0JYLGNBQUtFLElBQUwsQ0FBVUgsVUFBVixFQUFzQk4sUUFBdEIsQ0FBZ0MsRUFBckU7QUFDQXBCLEVBQUFBLGlCQUFpQixDQUFDZ0IsY0FBbEIsQ0FBaUNDLEtBQWpDO0FBQ0Q7O0FBRUQsZUFBZVYsYUFBZixHQUErQjs7QUFFN0IsUUFBTWdDLGFBQWEsR0FBR3ZDLGlCQUFpQixDQUFDZ0IsY0FBeEM7QUFDQSxNQUFJd0IsT0FBTyxHQUFHLE1BQU1ELGFBQWEsQ0FBQ0MsT0FBZCxFQUFwQjtBQUNBLFFBQU1BLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLDJCQUFiLENBQU47QUFDQUQsRUFBQUEsT0FBTyxDQUFDdkIsS0FBUjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvZHVjZSBqc29uIGdyYXBoIGRhdGEgZnJvbSBkYXRhYmFzZSBxdWVyaWVzXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmaWxlc3lzdGVtIH0gZnJvbSAnZnMnXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICdAZGVwZW5kZW5jeS9lbnRpdHknXG5pbXBvcnQgeyBEYXRhYmFzZSBhcyBEYXRhYmFzZU1vZHVsZSB9IGZyb20gJ0BkZXBlbmRlbmN5L2dyYXBoJ1xuY29uc3QgeyBEYXRhYmFzZSB9ID0gRGF0YWJhc2VNb2R1bGVcbmltcG9ydCB7IGJvbHRDeXBoZXJNb2RlbEFkYXB0ZXJGdW5jdGlvbiB9IGZyb20gJ0BkZXBlbmRlbmN5L2dyYXBoL3NvdXJjZS9pbXBsZW1lbnRhdGlvblBsdWdpbi9kYXRhYmFzZU1vZGVsQWRhcHRlci9ib2x0Q3lwaGVyTW9kZWxBZGFwdGVyLmpzJ1xuXG5sZXQgY29uY3JldGVEYXRhYmFzZUJlaGF2aW9yID0gbmV3IERhdGFiYXNlLmNsaWVudEludGVyZmFjZSh7XG4gIGltcGxlbWVudGF0aW9uTGlzdDogeyBib2x0Q3lwaGVyTW9kZWxBZGFwdGVyOiBib2x0Q3lwaGVyTW9kZWxBZGFwdGVyRnVuY3Rpb24oKSB9LFxuICBkZWZhdWx0SW1wbGVtZW50YXRpb246ICdib2x0Q3lwaGVyTW9kZWxBZGFwdGVyJyxcbn0pXG5sZXQgY29uY2VyZXRlRGF0YWJhc2VJbnN0YW5jZSA9IGNvbmNyZXRlRGF0YWJhc2VCZWhhdmlvcltFbnRpdHkucmVmZXJlbmNlLmdldEluc3RhbmNlT2ZdKERhdGFiYXNlKVxubGV0IGNvbmNlcmV0ZURhdGFiYXNlID0gY29uY2VyZXRlRGF0YWJhc2VJbnN0YW5jZVtEYXRhYmFzZS5yZWZlcmVuY2Uua2V5LmdldHRlcl0oKVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEdyYXBoRGF0YUZyb21GaWxlKHsgYXBpIC8qKnNjcmlwdE1hbmFnZXIgYXBpKi8sIHNob3VsZENsZWFyRGF0YWJhc2UgPSBmYWxzZSwgZ3JhcGhEYXRhRmlsZVBhdGggfSA9IHt9KSB7XG4gIGlmIChzaG91bGRDbGVhckRhdGFiYXNlKSBhd2FpdCBjbGVhckRhdGFiYXNlKClcbiAgbGV0IGdyYXBoRGF0YSA9IGdyYXBoRGF0YUZpbGVQYXRoID8gYXdhaXQgZmlsZXN5c3RlbS5yZWFkRmlsZShncmFwaERhdGFGaWxlUGF0aCkgOiB7IG5vZGU6IFtdLCBlZGdlOiBbXSB9XG4gIGF3YWl0IGNvbmNlcmV0ZURhdGFiYXNlLmxvYWRHcmFwaERhdGEoeyBub2RlRW50cnlEYXRhOiBncmFwaERhdGEubm9kZSwgY29ubmVjdGlvbkVudHJ5RGF0YTogZ3JhcGhEYXRhLmVkZ2UgfSlcbiAgY29uY2VyZXRlRGF0YWJhc2UuZHJpdmVySW5zdGFuY2UuY2xvc2UoKVxufVxuXG4vLyBSZWxpZXMgb24gdGhlIGludGVyZmFjZSBmb3IgY29uY3JldGUgZGF0YWJhc2UgcGx1Z2lucyBvZiBncmFwaFRyYXZlcnNhbCBtb2R1bGUuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0R3JhcGhEYXRhKHsgYXBpLCB0YXJnZXRQYXRoID0gJy4vdGVzdC9hc3NldC8nLCBmaWxlTmFtZSA9ICdncmFwaERhdGEuZXhwb3J0ZWQuanNvbicgfSA9IHt9KSB7XG4gIGNvbnN0IHRhcmdldFByb2plY3RSb290UGF0aCA9IGFwaS5wcm9qZWN0LmNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbi5kaXJlY3Rvcnkucm9vdFxuICBjb25zdCBleHBvcnRQYXRoID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKHRhcmdldFByb2plY3RSb290UGF0aCwgdGFyZ2V0UGF0aCkpXG4gIGxldCBncmFwaERhdGEgPSB7IG5vZGU6IGF3YWl0IGNvbmNlcmV0ZURhdGFiYXNlLmdldEFsbE5vZGUoKSwgZWRnZTogYXdhaXQgY29uY2VyZXRlRGF0YWJhc2UuZ2V0QWxsRWRnZSgpIH0gfD4gSlNPTi5zdHJpbmdpZnlcbiAgYXdhaXQgZmlsZXN5c3RlbS53cml0ZUZpbGUocGF0aC5qb2luKGV4cG9ydFBhdGgsIGZpbGVOYW1lKSwgZ3JhcGhEYXRhLCB7IGVuY29kaW5nOiAndXRmOCcsIGZsYWc6ICd3JyAvKnRydWN0YWNlIGZpbGUgaWYgZXhpc3RzIGFuZCBjcmVhdGUgYSBuZXcgb25lKi8gfSlcbiAgY29uc29sZS5sb2coYOKAoiBDcmVhdGVkIGpzb24gZmlsZSAtICR7cGF0aC5qb2luKGV4cG9ydFBhdGgsIGZpbGVOYW1lKX1gKVxuICBjb25jZXJldGVEYXRhYmFzZS5kcml2ZXJJbnN0YW5jZS5jbG9zZSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyRGF0YWJhc2UoKSB7XG4gIC8vIERlbGV0ZSBhbGwgbm9kZXMgaW4gdGhlIGluLW1lbW9yeSBkYXRhYmFzZVxuICBjb25zdCBncmFwaERCRHJpdmVyID0gY29uY2VyZXRlRGF0YWJhc2UuZHJpdmVySW5zdGFuY2VcbiAgbGV0IHNlc3Npb24gPSBhd2FpdCBncmFwaERCRHJpdmVyLnNlc3Npb24oKVxuICBhd2FpdCBzZXNzaW9uLnJ1bihgbWF0Y2ggKG4pIGRldGFjaCBkZWxldGUgbmApXG4gIHNlc3Npb24uY2xvc2UoKVxufVxuIl19