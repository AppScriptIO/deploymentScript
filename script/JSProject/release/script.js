"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.createGithubBranchedRelease = createGithubBranchedRelease;

var _nodegit = _interopRequireDefault(require("nodegit"));





















async function createGithubBranchedRelease({

  api,
  temporaryBranchName = 'distribution',
  brachToPointTo = 'master',
  commitToPointTo = null,
  tagName,
  buildCallback = build })
{
  const targetProject = api.project,
  targetProjectRoot = targetProject.configuration.rootPath,
  targetProjectGitUrl = 'https://github.com/AppScriptIO/scriptManager';

  const repository = await _nodegit.default.Repository.open(targetProjectRoot),
  tagger = _nodegit.default.Signature.now('meow', 'test@example.com');
  brachToPointTo = await _nodegit.default.Branch.lookup(repository, brachToPointTo, 1);

  commitToPointTo = Boolean(commitToPointTo) ?
  await _nodegit.default.Commit.lookup(repository, commitToPointTo) :
  await repository.getReferenceCommit(brachToPointTo);

  let branchReferenceList = await repository.getReferences(_nodegit.default.Reference.TYPE.OID);


  let doesTemporaryBranchExist = branchReferenceList.some(branch => branch.toString().includes(temporaryBranchName));
  let temporaryBranch;
  if (!doesTemporaryBranchExist) {

    temporaryBranch = await _nodegit.default.Branch.create(repository, temporaryBranchName, commitToPointTo, 1).catch(error => console.error(error));
    console.log(`• Created   temporary branch ${await temporaryBranch.name()} from commit ${commitToPointTo.sha()}`);
  } else {
    temporaryBranch = await _nodegit.default.Branch.lookup(repository, temporaryBranchName, 1);
  }

  await repository.checkoutBranch((await temporaryBranch.name()));




  await _nodegit.default.Reset.reset(repository, commitToPointTo, _nodegit.default.Reset.TYPE.HARD).
  then(number => {
    if (number) throw new Error(`• Could not reset repository ${repository} to commit ${commitToPointTo}`);
  }).
  catch(error => console.error);


  await buildCallback({ targetProjectRoot }).then(() => console.log('Project built successfully !'));


  let index = await repository.refreshIndex();
  let treeObject = await index.
  addAll(['**']).
  then(() => index.write()).
  then(() => index.writeTree());
  let parentCommit = await repository.getHeadCommit();
  await repository.
  createCommit('HEAD' || null, tagger, tagger, `🏗️ Build distribution code.`, treeObject, [
  parentCommit]).

  then(oid => {
    console.log(`• Commit created ${oid} for distribution code`);
  });


  let latestTemporaryBranchCommit = await repository.getHeadCommit();
  await _nodegit.default.Tag.create(repository, tagName, latestTemporaryBranchCommit, tagger, `Release of distribution code only.`, 0).then(oid => console.log(`• Tag created ${oid}`));

  await repository.checkoutBranch(brachToPointTo);

  try {
    if (_nodegit.default.Branch.isCheckedOut(temporaryBranch)) throw new Error(`Cannot delete a checked out branch ${await temporaryBranch.name()}.`);

    temporaryBranch = await _nodegit.default.Branch.lookup(repository, temporaryBranchName, 1);
    let error = _nodegit.default.Branch.delete(temporaryBranch);
    if (error) throw new Error(`Code thrown by 'libgit2' bindings = ${error}\n \tCheck https://www.nodegit.org/api/error/#CODE`);
    console.log(`• Deleted tempoarary branch ${await temporaryBranch.name()}.`);
  } catch (error) {
    throw error;
  }
}


function rebasingExample({ repository, branch, fromBranch, toBranch }) {
  return repository.rebaseBranches(
  branch.name(),
  fromBranch.name(),
  toBranch.name(),
  _nodegit.default.Signature.now('meow', 'test@example.com'),
  rebase => {
    console.log('One operation');
    return Promise.resolve();
  },
  rebaseMetadata => {
    console.log('Finished rebase');
    return Promise.resolve();
  });

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,