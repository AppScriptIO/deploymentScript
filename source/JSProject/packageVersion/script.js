"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.bumpVersion = bumpVersion;exports.checkVersion = adapter;var _path = _interopRequireDefault(require("path"));

var _assert = _interopRequireDefault(require("assert"));
var _os = _interopRequireDefault(require("os"));
var _fs = _interopRequireDefault(require("fs"));
var _jsonfile = _interopRequireDefault(require("jsonfile"));
var _gitUrlParse = _interopRequireDefault(require("git-url-parse"));
var _semver = _interopRequireDefault(require("semver"));
var _lodash = require("lodash");
var _githubGraphql = require("./graphqlQuery/github.graphql.js");
var _createGraphqlClient = require("./utility/createGraphqlClient.js");
var _writeJsonFile = _interopRequireDefault(require("write-json-file"));
var _nestedObjectAssign = _interopRequireDefault(require("nested-object-assign"));
var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _nodegit = _interopRequireDefault(require("nodegit"));const dependencyKeyword = ['dependencies', 'devDependencies', 'peerDependencies'];


function lookupConfigFile({ targetProjectRoot, configName }) {
  let configPossiblePath = [_path.default.join(targetProjectRoot, configName), _path.default.join(targetProjectRoot, 'configuration', configName)];

  let configPathArray = configPossiblePath.filter(configPath => _fs.default.existsSync(configPath));
  (0, _assert.default)(configPathArray.length > 0, `• ${configName} lookup failed, file not found in the configuration possible paths - ${configPossiblePath}.`);
  return configPathArray[0];
}


async function bumpVersion({
  api,
  token,
  tagger })


{
  token || (token = process.env.GITHUB_TOKEN || lookupGithubToken({ sshPath: '/d/.ssh' }));
  (0, _assert.default)(token, `❌ Github access token must be supplied.`);

  const targetProjectConfig = api.project.configuration.configuration,
  targetProjectRoot = targetProjectConfig.directory.root,
  targetPackagePath = _path.default.join(targetProjectRoot, 'package.json');


  const repository = await _nodegit.default.Repository.open(targetProjectRoot);


  let taggerSignature = tagger ? _nodegit.default.Signature.now(tagger.name, tagger.email) : await _nodegit.default.Signature.default(repository);
  (0, _assert.default)(taggerSignature, `❌ Github username should be passed or found in the git local/system configs.`);


  let packageConfig = await _jsonfile.default.readFile(targetPackagePath).catch(error => console.error(error));


  let updatedVersion = _semver.default.inc(packageConfig.version, 'patch');


  console.log(`• Updating pacakge.json file ${targetPackagePath} with bumped version ${packageConfig.version} --> ${updatedVersion}`);
  packageConfig.version = updatedVersion;
  await (0, _writeJsonFile.default)(targetPackagePath, packageConfig);


  let gitIgnorePath = lookupConfigFile({ targetProjectRoot, configName: '.gitignore' });
  let gitIgnorePattern = (0, _parseGitignore.default)(_fs.default.readFileSync(gitIgnorePath)).map(item => _path.default.join('!' + item));


  console.log(`Adding changed files to index...`);
  let index = await repository.refreshIndex();
  let changedFileList = index.entries().map(item => item.path);
  let treeObject = await index.

  addAll([].concat(changedFileList, gitIgnorePattern)).
  then(() => index.write()).
  then(() => index.writeTree());

  let parentCommit = await repository.getHeadCommit();
  await repository.
  createCommit(
  'HEAD' || null,
  taggerSignature,
  taggerSignature,
  `📦 Bump package.json version.`,
  treeObject,
  [parentCommit]).

  then(oid => console.log(`• Commit created ${oid} for package.json version bump`));

  return updatedVersion;
}


function adapter(...args) {
  const { api } = args[0];
  args[0].targetProject = api.project;
  updateGithubPackage(...args).catch(error => console.error(error));
}




async function updateGithubPackage({
  targetProject,
  token,
  prereleaseType = false,
  shouldUpdatePackage = false } =
{}) {
  if (!token) token = process.env.GITHUB_TOKEN || lookupGithubToken();
  (0, _assert.default)(token, `❌ Github access token must be supplied.`);

  const targetProjectRoot = targetProject.configuration.rootPath,
  targetPackagePath = _path.default.join(targetProjectRoot, 'package.json');

  const graphqlClient = (0, _createGraphqlClient.createGraphqlClient)({ token, endpoint: _githubGraphql.githubGraphqlEndpoint });


  let packageConfig = await _jsonfile.default.readFile(targetPackagePath).catch(error => console.error(error));

  let didAnyRepoUpdate = false;


  let modifiedPackageObject = {};
  for (let keyName of dependencyKeyword) {
    if (!packageConfig[keyName]) continue;
    let dependencyList = packageConfig[keyName];


    let githubDependency = filterGithubDependency({ dependencyList });
    for (let [index, repositoryUrl] of Object.entries(githubDependency)) {
      const parsedUrl = (0, _gitUrlParse.default)(repositoryUrl),
      currentUrlVersion = parsedUrl.hash && parsedUrl.hash.replace('semver:', '');
      if (!currentUrlVersion) continue;
      if (!_semver.default.valid(currentUrlVersion) && _semver.default.validRange(currentUrlVersion)) {
        console.log(`Skipping "${repositoryUrl}" with range semver ${currentUrlVersion} `);
        continue;
      }

      let releaseList = await queryReleaseUsingUrl({ graphqlClient, repositoryUrl });
      if (!releaseList.length) continue;

      filterComparableRelease({ releaseList: { reference: releaseList } });

      if (prereleaseType) {

        (0, _lodash.remove)(releaseList, value => {
          let prereleaseComponent = _semver.default.prerelease(value.tag.name);
          return prereleaseComponent && prereleaseComponent.includes(prereleaseType) ? false : true;
        });
      } else {

        (0, _lodash.remove)(releaseList, value => Boolean(_semver.default.prerelease(value.tag.name)));
      }

      let latestRelease = pickLatestRelease({ releaseList });


      let shouldUpdateVerion = false;
      if (currentUrlVersion && latestRelease) {
        console.log(`Comparing package.json version %s with latest release %s:`, currentUrlVersion, latestRelease);
        shouldUpdateVerion = _semver.default.gt(latestRelease, currentUrlVersion);
      }

      if (shouldUpdateVerion) {
        didAnyRepoUpdate = true;
        githubDependency[index] = updateVersion({ parsedUrl, newVersion: latestRelease });
      } else {
        console.log(`• Git URI ${repositoryUrl} is up to date. Current "%s" - latest "%s":`, currentUrlVersion, latestRelease);
      }
    }


    modifiedPackageObject[keyName] = githubDependency;
  }

  if (didAnyRepoUpdate) {

    let mergedPackageObject = (0, _nestedObjectAssign.default)(packageConfig, modifiedPackageObject);
    if (shouldUpdatePackage) {
      await (0, _writeJsonFile.default)(targetPackagePath, mergedPackageObject);
      console.log(`• Package.json file was updated with the latest Git packages.`);
    } else {
      console.log(`• Pacakge object with updated versions:`);
      console.dir(mergedPackageObject);
    }
  } else console.log(`• No repository needs update.`);
}


function lookupGithubToken({ sshPath = _path.default.join(_os.default.homedir(), '.ssh'), tokenFileName = 'github_token' } = {}) {
  const tokenFile = _path.default.join(sshPath, tokenFileName);
  return _fs.default.readFileSync(tokenFile).toString();
}


function filterGithubDependency({ dependencyList }) {
  return (0, _lodash.pickBy)(dependencyList, (value, index) => {
    let parsedUrl = (0, _gitUrlParse.default)(value);
    return parsedUrl.resource == 'github.com';
  });
}


async function queryReleaseUsingUrl({ graphqlClient, repositoryUrl }) {
  let parsedUrl = (0, _gitUrlParse.default)(repositoryUrl),
  currentUrlVersion = parsedUrl.hash;

  let releaseArray = await graphqlClient.
  query({
    query: _githubGraphql.getReleases,
    variables: {
      repoURL: repositoryUrl } }).


  then(response => {
    return response.data.resource.releases.edges.map((value, index) => {
      return value.node;
    });
  }).
  catch(error => {
    throw error;
  });

  return releaseArray;
}

function pickLatestRelease({ releaseList }) {
  releaseList.sort((current, next) => {
    return _semver.default.gt(current.tag.name, next.tag.name) ? -1 : 1;
  });
  return releaseList[0].tag.name;
}


function filterComparableRelease({ releaseList = { reference: [] } }) {

  (0, _lodash.remove)(releaseList.reference, value => Boolean(value.isPrerelease || value.isDraft));

  (0, _lodash.remove)(releaseList.reference, value => !Boolean(_semver.default.valid(value.tag.name)));

  (0, _lodash.remove)(releaseList.reference, value => !Boolean(value.tag));
}

function updateVersion({ parsedUrl, newVersion: latestRelease }) {
  let semverPrefix = parsedUrl.hash.includes('semver:') ? 'semver:' : '';

  return `${_gitUrlParse.default.stringify(parsedUrl)}#${semverPrefix}${latestRelease}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,