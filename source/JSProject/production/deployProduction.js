"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _path = _interopRequireDefault(require("path"));

var _nodeSsh = _interopRequireDefault(require("node-ssh"));
var _configuration = _interopRequireDefault(require("../../../../setup/configuration/configuration.js"));


var _parseKeyValuePairSeparatedBySymbol = require("../utility/parseKeyValuePairSeparatedBySymbol.js");const { execSync, spawn, spawnSync } = require('child_process');const applicationPath = _path.default.join(_configuration.default.directory.projectPath, 'application');const appDeploymentLifecycle = _path.default.join(applicationPath, 'dependency/appDeploymentLifecycle');

console.group('• Running entrypoint application in Manager Container:');
console.log(`- passed process arguments: ${JSON.stringify(process.argv)}`);
const namedArgs = (0, _parseKeyValuePairSeparatedBySymbol.parseKeyValuePairSeparatedBySymbolFromArray)({ array: process.argv });





let ymlFile = `${appDeploymentLifecycle}/deploymentContainer/production.dockerStack.yml`;
let serviceName = 'nodejs';
let containerPrefix = 'app';
switch (process.argv[0]) {
  default:
    deployProjectionStack({});
    break;}



async function deployProjectionStack({}) {
  let remoteWorkingDirectory = '/tmp/sshUploadedFile';


  const ssh = new _nodeSsh.default();
  await ssh.
  connect({
    host: namedArgs.remoteIP,
    port: '22',
    username: process.env.sshUsername,
    privateKey: _path.default.join(_configuration.default.directory.projectPath, '.ssh/google_compute_engine'),
    readyTimeout: 120000 }).

  catch(error => {
    throw error;
  }).
  then(() => {
    console.log('SSH Connection successful');
  });


  await ssh.putFile(ymlFile, _path.default.join(remoteWorkingDirectory, 'production.dockerStack.yml')).then(
  function () {
    console.log(`production.dockerStack.yml uploaded to ${remoteWorkingDirectory}/production.dockerStack.yml`);
  },
  function (error) {
    console.log('Failed to upload production.dockerStack.yml file.');
    console.log(error);
  });





  let stackName = _configuration.default.stackName;
  let environmentVariable = {
    imageName: _configuration.default.dockerImageName,
    imageTag: namedArgs.imageTag || 'latest',
    domain: _configuration.default.domain,
    hostStorageFolderName: _configuration.default.hostStorageFolderName };

  let inlineArgument = (0, _parseKeyValuePairSeparatedBySymbol.combineKeyValueObjectIntoString)({ object: environmentVariable });
  await ssh.
  execCommand(

  `sudo ${inlineArgument} docker stack deploy -c ./production.dockerStack.yml ${stackName}`,
  {
    cwd: remoteWorkingDirectory,
    stream: 'stdout',
    options: {} }).




  then(function (output) {
    console.log('stdout:');
    console.log(output.stdout);
  });

  console.log('• Closing connection.');
  ssh.dispose();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,