"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));

var _nodejsLiveReload = require("@deployment/nodejsLiveReload");


var _deploymentProvisioning = require("@deployment/deploymentProvisioning");const { resolveAndLookupFile } = require('@dependency/handleFilesystemOperation');const boltProtocolDriver = require('neo4j-driver').v1;

async function clearGraphData() {
  console.groupCollapsed('• Run prerequisite containers:');
  _deploymentProvisioning.memgraphContainer.runDockerContainer();
  console.groupEnd();

  console.log('• Cleared graph database.');
  const url = { protocol: 'bolt', hostname: 'localhost', port: 7687 },
  authentication = { username: 'neo4j', password: 'test' };
  const graphDBDriver = boltProtocolDriver.driver(`${url.protocol}://${url.hostname}:${url.port}`, boltProtocolDriver.auth.basic(authentication.username, authentication.password));
  let session = await graphDBDriver.session();
  let result = await session.run(`match (n) detach delete n`);
  session.close();
}

function setInterval({ interval = 1000 } = {}) {

  console.log(`Executing interval in ${__filename}. NodeJS version: ${JSON.stringify(process.versions)}`);
  setInterval(() => console.info('Sleeping...'), interval);
}
const setTimeout = ({ timeout = 10000 } = {}) => setTimeout(() => console.log('setTimeout command ended. The process will exit now.'), timeout);














module.exports = async function ({ api } = {}) {var _api$project$configur, _api$project$configur2, _api$project$configur3, _api$project$configur4, _api$project$configur5;
  let rootServiceConfig = (_api$project$configur = api.project.configuration.configuration) === null || _api$project$configur === void 0 ? void 0 : (_api$project$configur2 = _api$project$configur.apiGateway) === null || _api$project$configur2 === void 0 ? void 0 : _api$project$configur2.service.find(item => item.subdomain == null);
  (0, _assert.default)(rootServiceConfig, `Root service must be configured in the projects apiGateway configuration.`);
  let targetServiceHost = (_api$project$configur3 = api.project.configuration.configuration) === null || _api$project$configur3 === void 0 ? void 0 : (_api$project$configur4 = _api$project$configur3.runtimeVariable) === null || _api$project$configur4 === void 0 ? void 0 : _api$project$configur4.HOST;
  (0, _assert.default)(targetServiceHost, `HOST runtime variable must be configured in the project's runtimeVariable configuration.`);
  let clientSideProjectConfigList = (_api$project$configur5 = api.project.configuration.configuration) === null || _api$project$configur5 === void 0 ? void 0 : _api$project$configur5.clientSideProjectConfigList;
  (0, _assert.default)(clientSideProjectConfigList, `clientSideProjectConfigList must be configured in the project's configuration.`);

  let { restart: reloadBrowserClient } = await (0, _nodejsLiveReload.browserLivereload)({
    targetProject: api.project,
    rootServicePort: rootServiceConfig.port,
    rootServiceHost: targetServiceHost });


  let manageSubprocess = new _nodejsLiveReload.ManageSubprocess({ cliAdapterPath: _path.default.join(api.project.configuration.rootPath, 'entrypoint/cli') });
  manageSubprocess.on('ready', () => reloadBrowserClient());


  await clearGraphData();
  manageSubprocess.runInSubprocess();

  const watchFileList_serverSide = [
  '/project/application/source/serverSide/**/*.js',



  '!/project/application/source/serverSide/node_modules{,/**/*,!/appscript/**/*}'];



  await (0, _nodejsLiveReload.watchFile)({

    triggerCallback: async () => {
      await clearGraphData();
      manageSubprocess.runInSubprocess();
    },
    fileArray: [_path.default.join(api.project.configuration.rootPath, 'source')],
    ignoreNodeModules: true,
    logMessage: true });




  const watchFileList_clientSide = [







  '/project/application/source/clientSide/**/*',
  '!/project/application/source/clientSide/**/node_modules/**/*',
  '!/project/application/source/clientSide/**/component.package/**/*',
  '!/project/application/source/clientSide/**/js.package.yarn/**/*'];


  const clientSidePathList = clientSideProjectConfigList.map(item => item.path);
  await (0, _nodejsLiveReload.watchFile)({

    triggerCallback: () => reloadBrowserClient(),
    fileArray: [...clientSidePathList],
    ignoreNodeModules: true,
    logMessage: true });

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,