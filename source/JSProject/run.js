"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));

var _nodejsLiveReload = require("@deployment/nodejsLiveReload");


var memgraphContainer = _interopRequireWildcard(require("./container/memgraphContainer.js"));const { resolveAndLookupFile, findFileByGlobPattern } = require('@dependency/handleFilesystemOperation');const boltProtocolDriver = require('neo4j-driver').v1;

async function clearGraphData() {
  console.groupCollapsed('• Run prerequisite containers:');
  memgraphContainer.runDockerContainer();
  console.groupEnd();

  console.log('• Cleared graph database.');
  const url = { protocol: 'bolt', hostname: 'localhost', port: 7687 },
  authentication = { username: 'neo4j', password: 'test' };
  const graphDBDriver = boltProtocolDriver.driver(`${url.protocol}://${url.hostname}:${url.port}`, boltProtocolDriver.auth.basic(authentication.username, authentication.password));
  let session = await graphDBDriver.session();
  let result = await session.run(`match (n) detach delete n`);
  session.close();
}

function setInterval({ interval = 1000 } = {}) {

  console.log(`Executing interval in ${__filename}. NodeJS version: ${JSON.stringify(process.versions)}`);
  setInterval(() => console.info('Sleeping...'), interval);
}
const setTimeout = ({ timeout = 10000 } = {}) => setTimeout(() => console.log('setTimeout command ended. The process will exit now.'), timeout);














module.exports = async function ({ api } = {}) {var _api$project$configur, _api$project$configur2, _api$project$configur3, _api$project$configur4, _api$project$configur5;
  const applicationPath = _path.default.join(api.project.configuration.rootPath, 'entrypoint/cli'),
  rootPath = api.project.configuration.rootPath;
  let rootServiceConfig = (_api$project$configur = api.project.configuration.configuration) === null || _api$project$configur === void 0 ? void 0 : (_api$project$configur2 = _api$project$configur.apiGateway) === null || _api$project$configur2 === void 0 ? void 0 : _api$project$configur2.service.find(item => item.subdomain == null);
  (0, _assert.default)(rootServiceConfig, `Root service must be configured in the projects apiGateway configuration.`);
  let targetServiceHost = (_api$project$configur3 = api.project.configuration.configuration) === null || _api$project$configur3 === void 0 ? void 0 : (_api$project$configur4 = _api$project$configur3.runtimeVariable) === null || _api$project$configur4 === void 0 ? void 0 : _api$project$configur4.HOST;
  (0, _assert.default)(targetServiceHost, `HOST runtime variable must be configured in the project's runtimeVariable configuration.`);
  let clientSideProjectConfigList = (_api$project$configur5 = api.project.configuration.configuration) === null || _api$project$configur5 === void 0 ? void 0 : _api$project$configur5.clientSideProjectConfigList;
  (0, _assert.default)(clientSideProjectConfigList, `clientSideProjectConfigList must be configured in the project's configuration.`);


  let manageSubprocess = new _nodejsLiveReload.ManageSubprocess({ cliAdapterPath: applicationPath });
  const runApplication = async () => {
    await clearGraphData();
    manageSubprocess.runInSubprocess();
  };


  let { restart: reloadBrowserClient } = await (0, _nodejsLiveReload.browserLivereload)({
    targetProject: api.project,
    rootServicePort: rootServiceConfig.port,
    rootServiceHost: targetServiceHost });


  manageSubprocess.on('ready', () => reloadBrowserClient());
  await runApplication();

  {
    let serverSideList = await findFileByGlobPattern({
      basePath: rootPath,
      patternGlob: [`**/*.js`],
      ignore: [`**/{temporary/**/*,distribution/**/*,.git/**/*,node_modules/**/*}`].map(item => _path.default.join(rootPath, item)) });


    await (0, _nodejsLiveReload.watchFile)({

      triggerCallback: async () => {
        await runApplication();
      },
      fileArray: [...serverSideList],
      ignoreNodeModules: false,
      logMessage: true });

  }

  {
    let clientSideList = [];
    for (let { path: clientSideBasePath } of clientSideProjectConfigList)
    clientSideList = [
    ...clientSideList,
    ...(await findFileByGlobPattern({
      basePath: clientSideBasePath,
      patternGlob: ['**/*.js', '**/*.css', '**/*.html'],
      ignore: [`**/{@package*/**/*,temporary/**/*,distribution/**/*,.git/**/*,node_modules/**/*}`].map(item => _path.default.join(clientSideBasePath, item)) }))];



    await (0, _nodejsLiveReload.watchFile)({

      triggerCallback: () => reloadBrowserClient(),
      fileArray: [...clientSideList],
      ignoreNodeModules: false,
      logMessage: true });

  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,