"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runApplication = runApplication;var _child_process = require("child_process");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));





const developmentCodeFolder = _path.default.join(_os.default.homedir(), 'code');

async function runApplication({ api, scriptCommandName, scriptCommand = '/bin/bash' } = {}) {
  const applicationPath = _path.default.join(api.project.configuration.rootPath, 'entrypoint/cli'),
  rootPath = api.project.configuration.rootPath;

  let containerCommand = scriptCommandName ? `yarn run ${scriptCommandName}` : scriptCommand;

  let executableCommand = [
  'docker',
  `run`,




  '--init',
  '--sig-proxy',
  `--interactive --tty`,
  `--rm`,
  `--workdir ${'/project'}`,

  `--volume ${developmentCodeFolder}:${developmentCodeFolder}`,
  `--volume ${rootPath}:${'/project'}`,
  `--volume /var/run/docker.sock:/var/run/docker.sock`,



  `--network=${'shared'}`,
  `--network-alias ${'application'}`,



  `-p 8080:8080 -p 8081:8081`,


  `${'node:current'}`,
  containerCommand];


  console.log('container command' + ': \n', containerCommand);
  console.log(`â€¢ docker command: "${executableCommand.join(' ')}"`);

  let option = {
    cwd: rootPath,
    detached: false,
    shell: true,
    stdio: [0, 1, 2],

    env: Object.assign({}, process.env, {}) };



  const [command, ...commandArgument] = executableCommand;
  (0, _child_process.spawnSync)(command, commandArgument, option);

















}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,