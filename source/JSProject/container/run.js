"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.dockerCli = dockerCli;exports.dockerComposeCli = dockerComposeCli;var _child_process = require("child_process");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));



var jsYaml = _interopRequireWildcard(require("js-yaml"));
var _mkdirp = _interopRequireDefault(require("mkdirp"));

const developmentCodeFolder = _path.default.join(_os.default.homedir(), 'code'),
yarnLinkFolrder = _path.default.join(_os.default.homedir(), '.config');


const dockerDeploymentImage = 'myuserindocker/deployment-environment:latest' || 'node:current';

async function dockerCli({ api, scriptCommand = '/bin/bash' } = {}) {
  const applicationPath = _path.default.join(api.project.configuration.rootPath, 'entrypoint/cli'),
  rootPath = api.project.configuration.rootPath,
  containerProjectPath = rootPath;

  let executableCommand = [
  'docker',
  `run`,




  '--init',
  '--sig-proxy',
  `--interactive --tty`,
  `--rm`,
  `--workdir ${containerProjectPath}`,

  `--volume ${rootPath}:${containerProjectPath}`,

  `--volume ${developmentCodeFolder}:${developmentCodeFolder}`,
  `--volume ${yarnLinkFolrder}:${yarnLinkFolrder}`,
  `--volume /var/run/docker.sock:/var/run/docker.sock`,



  `--user ${_os.default.userInfo().uid}:${_os.default.userInfo().gid}`,
  `--volume /etc/passwd:/etc/passwd:ro`,
  `--volume /etc/group:/etc/group:ro`,
  `--volume /etc/shadow:/etc/shadow:ro`,


  `--network=${'external'}`,
  `--network-alias ${'application'}`,



  `-p 443:443 -p 8080:8080 -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 -p 8085:8085`,
  `-p 9229:9229`,
  `-p 9090:9090 -p 9901:9901 -p 9902:9902`,




  `${dockerDeploymentImage}`,
  scriptCommand];


  console.log('container command' + ': \n', scriptCommand);
  console.log(`• docker command: "${executableCommand.join(' ')}"`);

  let option = {
    cwd: rootPath,
    detached: false,
    shell: true,
    stdio: [0, 1, 2],

    env: Object.assign({}, process.env, {}) };



  const [command, ...commandArgument] = executableCommand;
  (0, _child_process.spawnSync)(command, commandArgument, option);
}



async function dockerComposeCli({ api, scriptCommand = '/bin/bash' } = {}) {
  const targetProjectConf = api.project.configuration.configuration,
  rootPath = api.project.configuration.rootPath,
  targetTemporaryFolder = _path.default.join(rootPath, 'temporary'),
  containerProjectPath = rootPath;

  await (0, _mkdirp.default)(targetTemporaryFolder);

  let option = {
    cwd: rootPath,
    detached: false,
    shell: true,
    stdio: [0, 1, 2],

    env: Object.assign({}, process.env, {}) };




  let portList = [
  ...targetProjectConf.apiGateway.service.map(item => item.port).filter(item => item),

  ...[

  9229,

  9090,
  9901,
  9902]];


  let serviceConfig = {
    version: '3.7',

    networks: {
      internal: {
        driver: 'bridge' } },



    services: {
      application: {
        image: dockerDeploymentImage,



        ports: portList.map(port => {
          return {
            target: port,
            published: port };


        }),

        networks: {
          internal: {
            aliases: ['application'] } },



        volumes: [
        `${rootPath}:${containerProjectPath}`,

        `${developmentCodeFolder}:${developmentCodeFolder}`,
        `${yarnLinkFolrder}:${yarnLinkFolrder}`,
        `/var/run/docker.sock:/var/run/docker.sock`,


        `/etc/passwd:/etc/passwd:ro`,
        `/etc/group:/etc/group:ro`,
        `/etc/shadow:/etc/shadow:ro`],


        user: `${_os.default.userInfo().uid}:${_os.default.userInfo().gid}`,
        working_dir: rootPath,


        command: scriptCommand,






        tty: true,
        stdin_open: true },


      memgraph: {
        image: 'memgraph:latest',


        ports: [
        {
          target: 7687 }],




        networks: {
          internal: {
            aliases: ['memgraph'] } } } } };







  let yamlFile = _path.default.join(targetTemporaryFolder, 'dockerCompose.yaml');
  _fs.default.writeFileSync(yamlFile, jsYaml.dump(serviceConfig, { lineWidth: Infinity, noCompatMode: true }));

  let dockerComposeCommand = `docker-compose --file ${yamlFile} --project-name webappProject --log-level INFO`;

  {


    let executableCommand = [
    [
    dockerComposeCommand,
    'down --volumes'].
    join(' ')];

    const [command, ...commandArgument] = executableCommand;
    (0, _child_process.spawnSync)(command, commandArgument, option);
  }

  let executableCommand = [
  [
  dockerComposeCommand,







  `up --no-build --force-recreate --abort-on-container-exit --always-recreate-deps`].
  join(' ')];


  console.log('container command' + ': \n', scriptCommand);
  console.log(`• docker command: "${executableCommand.join(' ')}"`);
  const [command, ...commandArgument] = executableCommand;
  (0, _child_process.spawnSync)(command, commandArgument, option);



  process.on('SIGINT', (code, signal) => {
    console.log(`[Process ${process.pid}]: signal ${signal}, code ${code};`);

    let executableCommand = [
    [
    dockerComposeCommand,
    'down'].

    join(' ')];

    const [command, ...commandArgument] = executableCommand;
    (0, _child_process.spawnSync)(command, commandArgument, option);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,