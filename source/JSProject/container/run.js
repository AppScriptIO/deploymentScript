"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _child_process = require("child_process");




var _os = _interopRequireDefault(require("os"));const resolve = require('resolve');







{
  option = {
    cwd: applicationPath,
    detached: false,
    shell: true,

    stdio: [0, 1, 2],
    env: {
      DEPLOYMENT: 'development',
      hostPath: process.env.hostPath } };


  (0, _child_process.spawnSync)(command, commandArgument, option);

  let childProcess = (0, _child_process.spawn)(processCommand, processCommandArgs, processOption);
  childProcess.on('error', err => function (e) {throw e;}(err));
  childProcess.on('exit', () => console.log(`PID: Child ${childProcess.pid} terminated.`));
  childProcess.unref();
  childProcess.on('exit', () => {
    (0, _child_process.spawnSync)('docker', [`kill ${containerPrefix}`], {
      detached: false,
      shell: true,
      stdio: 'inherit',
      env: process.env });

  });
  console.log(`PID: Child ${childProcess.pid}`);
  process.on('SIGINT', () => {

    childProcess.kill('SIGINT');
  });
}

{

  ;[
  `run`,
  `--rm`,
  `--interactive --tty`,
  `--volume ${application.hostPath}:${application.pathInContainer}`,

  `--volume /var/run/docker.sock:/var/run/docker.sock`,
  `--volume ${_os.default.homedir()}/.ssh:/project/.ssh`,
  `--network=${networkName}`,
  `--network-alias ${networkAlais}`,
  `-P`,
  `--env applicationPathOnHostMachine=${applicationPathOnHostMachine}`,
  `--env sshUsername=${_os.default.userInfo().username}`,
  `--env PWD=${workingDirectoryInContainer_PWD}`,
  `--workdir ${workingDirectoryInContainer_CWD}`,
  `--env configurationPath=${configurationAbsoluteContainerPath}`,
  `--name ${containerPrefix}`,

  `${image}`,
  `${containerCommand}`];



  `docker-compose -f ${ymlFile} up -d --no-build --force-recreate --abort-on-container-exit ${serviceName}`;
  `docker-compose -f ${ymlFile} build --no-cache ${serviceName}`;
  [
  'docker-compose',
  `-f ${ymlFile}`,
  `--project-name ${containerPrefix}`,
  `run --service-ports --use-aliases`,
  `--entrypoint '${containerCommand}'`,
  `${serviceName}`];

  ['docker-compose', `-f ${ymlFile}`, `--project-name ${projectName}`, `down`];
  `docker-compose -f $dockerComposeFilePath pull containerDeploymentManagement`;
  `docker pull myuserindocker/deployment-environment:latest`;


  ['docker', `network create ${networkName}`];
}


;`
    dockerImage=myuserindocker/deployment-environment:latest;
    if [[ "$(docker images -q $dockerImage 2> /dev/null)" == "" ]]; then
        dockerImage=node:latest
    fi;
  `;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,