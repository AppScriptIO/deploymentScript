"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.dockerBuildImage = dockerBuildImage;var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));

var _dockerfileGenerator = require("dockerfile-generator");
var _jsonfile = _interopRequireDefault(require("jsonfile"));
var _paramCase = require("param-case");
var _mkdirp = _interopRequireDefault(require("mkdirp"));

async function dockerBuildImage({ api } = {}) {var _packageConfig$name$s;
  const targetProjectConf = api.project.configuration.configuration,
  targetProjectRoot = api.project.configuration.rootPath,
  targetPackagePath = _path.default.join(targetProjectRoot, 'package.json'),
  targetTemporaryFolder = _path.default.join(targetProjectRoot, 'temporary'),
  containerProjectPath = targetProjectRoot;

  await (0, _mkdirp.default)(targetTemporaryFolder);

  let packageConfig = _jsonfile.default.readFileSync(targetPackagePath);

  let dockerFileConfig = [
  await (0, _dockerfileGenerator.generate)({

    from: 'node:current AS stage1',
    copy: {
      ['./']: '/project' },

    working_dir: '/project',

    run: ['yarn', 'install', '--production'] }),









  await (0, _dockerfileGenerator.generate)({
    from: 'node:current',




    copy: {
      ['--from=stage1 /project']: '/project' },

    working_dir: '/project',

    entrypoint: 'node',
    cmd: ['--eval', `"require(process.cwd()).application({},{memgraph:{host:'memgraph'}})"`] })].

  join('\n');

  let dockerFile = _path.default.join(targetTemporaryFolder, 'build.dockerfile');
  _fs.default.writeFileSync(dockerFile, dockerFileConfig);


  let dockerBuildContext = targetProjectRoot;

  let imageName = (_packageConfig$name$s = packageConfig.name.substring(packageConfig.name.lastIndexOf('/') + 1), (0, _paramCase.paramCase)(_packageConfig$name$s));
  let executableCommand = [
  [
  'docker',
  `build --file ${dockerFile} --rm --no-cache --pull --tag myuserindocker/${imageName}:${packageConfig.version} --tag myuserindocker/${imageName}:latest ${targetProjectConf.directory.distribution}`].
  join(' ')];


  console.log(`â€¢ docker command: "${executableCommand.join(' ')}"`);
  let option = {
    cwd: targetProjectRoot,
    detached: false,
    shell: true,
    stdio: [0, 1, 2],

    env: Object.assign({}, process.env, {}) };



  const [command, ...commandArgument] = executableCommand;
  (0, _child_process.spawnSync)(command, commandArgument, option);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,