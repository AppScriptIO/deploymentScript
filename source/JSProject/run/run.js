"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");



var _path = _interopRequireDefault(require("path"));
var _fs = _interopRequireDefault(require("fs"));
var _configuration = _interopRequireDefault(require("../../../../setup/configuration/configuration.js"));
var _sleepRun = _interopRequireDefault(require("./sleep.run.js"));console.log('• Running entrypoint application in Manager Container in default mode.');console.log(`- passed process arguments: ${JSON.stringify(process.argv)}`);const { execSync, spawn, spawnSync } = require('child_process');
const applicationPath = _path.default.join(_configuration.default.directory.projectPath, 'application');
const appDeploymentLifecycle = _path.default.join(applicationPath, 'dependency/appDeploymentLifecycle');
const distributionServerSide = _configuration.default.distribution.serverSide;
const serverSidePath = _configuration.default.directory.serverSidePath;


let nodeModuleFolder = `${applicationPath}/source/serverSide/node_modules`;
let packageManagerFolder = `${applicationPath}/source/packageManager/server.yarn/`;
if (!_fs.default.existsSync(nodeModuleFolder)) {
  spawnSync('yarn', [`install`], { cwd: packageManagerFolder, shell: true, stdio: [0, 1, 2] });
}













let ymlFile = `${appDeploymentLifecycle}/deploymentContainer/development.dockerCompose.yml`;
let serviceName = 'nodejs';
let containerPrefix = 'app';
switch (process.argv[0]) {
  case 'sleep':
    (0, _sleepRun.default)({ ymlFile, serviceName, containerPrefix });
    break;
  default:








    let appEntrypointPath =
    process.argv.includes('distribution') && false ? `${distributionServerSide}/entrypoint.js` : `${serverSidePath}/entrypoint.js`;
    console.log(`App enrypoint path: ${appEntrypointPath}`);



    let debugCommand = process.argv.includes('debug') ? `--inspect${process.argv.includes('break') ? '-brk' : ''}=0.0.0.0:9229` : '';

    let containerCommand = process.argv.includes('livereload') ? `node ${debugCommand} ${appDeploymentLifecycle}/nodejsLivereload/ watch:livereload` : `node ${debugCommand} ${appEntrypointPath}`;
    console.log(`• nodejs containerCommand = ${containerCommand}`);

    let environmentVariable = {
      DEPLOYMENT: 'development',
      SZN_DEBUG: debugCommand ? true : false,
      SZN_DEBUG_COMMAND: debugCommand,
      hostPath: process.env.hostPath };

    if (process.argv.includes('distribution')) environmentVariable['DISTRIBUTION'] = true;
    if (process.argv.includes('distribution'))
    Object.assign(

    environmentVariable,
    {
      SZN_OPTION_ENTRYPOINT_NAME: 'entrypoint.js',
      SZN_OPTION_ENTRYPOINT_PATH: _path.default.join(_configuration.default.directory.distributionPath, _configuration.default.directory.serverSide.folderName) });




    let processCommand = 'docker-compose',
    processCommandArgs = [`-f ${ymlFile}`, `--project-name ${containerPrefix}`, `run --service-ports --use-aliases`, `--entrypoint '${containerCommand}'`, `${serviceName}`],
    processOption = {

      shell: true,
      stdio: [0, 1, 2],
      env: environmentVariable };

    spawnSync(processCommand, processCommandArgs, processOption);
    break;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,