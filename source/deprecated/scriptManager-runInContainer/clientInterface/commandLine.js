"use strict";




const path = require('path');
const assert = require('assert');
const resolve = require('resolve');
const slash = require('slash');
const moduleRootPath = `${__dirname}/../../../`;
const { runscriptManagerInContainerWithClientApp } = require(moduleRootPath);
const { parseKeyValuePairSeparatedBySymbolFromArray, combineKeyValueObjectIntoString } = require('@dependency/parseKeyValuePairSeparatedBySymbol');
const ownConfig = require(path.join(moduleRootPath, 'configuration/configuration.js'));
const { configurationFileLookup } = require(`@dependency/configurationManagement`);

const message_prefix = `\x1b[3m\x1b[2m•[${path.basename(__filename)} JS script]:\x1b[0m`;
console.group(`%s \x1b[33m%s\x1b[0m`, `${message_prefix}`, `ƒ container manager - container with volumes & requested entrypoint script`);

cliInterface();






function cliInterface() {

  const currentDirectory = path.normalize(process.cwd()),
  namedArgs = parseKeyValuePairSeparatedBySymbolFromArray({ array: process.argv }),
  scriptPath = path.normalize(process.argv[1]);

  let { configuration: applicationConfig, path: configurationPath } = configurationFileLookup({
    configurationPath: namedArgs.configuration,
    currentDirectory,
    configurationBasePath: ownConfig.targetApp.configurationBasePath });



  let relativeScriptFromPWDPath = path.relative(currentDirectory, scriptPath),
  nodeModulesPartialPath = ['node_modules'].concat(relativeScriptFromPWDPath.split('node_modules').slice(1)).join(''),
  nodeModulesParentPartialPath = relativeScriptFromPWDPath.split('node_modules').shift(),
  nodeModulesParentPath = path.join(currentDirectory, nodeModulesParentPartialPath);

  const scriptManagerHostRelativePath = path.dirname(resolve.sync('@dependency/appDeploymentManager/package.json', { preserveSymlinks: true, basedir: nodeModulesParentPath }));


  console.log(`Project root path: ${applicationConfig.directory.application.hostAbsolutePath}`);
  runscriptManagerInContainerWithClientApp({
    configurationAbsoluteHostPath: configurationPath,
    application: {
      hostPath: applicationConfig.directory.application.hostAbsolutePath,
      configuration: applicationConfig },

    scriptManager: {
      hostRelativePath: scriptManagerHostRelativePath },

    invokedDirectly: require.main === module ? true : false });

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,