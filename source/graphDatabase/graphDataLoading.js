"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.loadGraphDataFromFile = loadGraphDataFromFile;exports.exportAllGraphData = exportAllGraphData;exports.exportSpecificGraphData = exportSpecificGraphData;exports.fixJSONData = fixJSONData;exports.clearDatabase = clearDatabase;

var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _fs = require("fs");

var _graphTraversal = require("@dependency/graphTraversal");
var implementation = _interopRequireWildcard(require("@dependency/graphTraversal-implementation"));

const uuidv4 = require('uuid/v4');


function removeArrayDuplicateEdgeObject(array) {
  let unique = [];
  array.forEach(item => {
    if (!unique.some(i => i.identity == item.identity)) unique.push(item);
  });
  return unique;
}

async function loadGraphDataFromFile({ api, shouldClearDatabase = false, graphDataFilePath, url = { protocol: 'bolt', hostname: 'localhost', port: 7687 } } = {}) {
  let concreteDatabaseBehavior = new _graphTraversal.Database.clientInterface({
    implementationList: { boltCypherModelAdapter: implementation.database.boltCypherModelAdapterFunction({ url, schemeReference: _graphTraversal.schemeReference }) },
    defaultImplementation: 'boltCypherModelAdapter' });

  let concereteDatabase = concreteDatabaseBehavior[_graphTraversal.Database.$.key.getter]();

  (0, _assert.default)(graphDataFilePath, `• graphDataFilePath must be passed to script - ${graphDataFilePath}`);
  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  if (shouldClearDatabase) await clearDatabase({ concereteDatabase, url });
  let absolutePath = _path.default.isAbsolute(graphDataFilePath) ? graphDataFilePath : _path.default.join(targetProjectRootPath, graphDataFilePath);
  let graphData = require(absolutePath);
  (0, _assert.default)(Array.isArray(graphData.node) && Array.isArray(graphData.edge), `• Unsupported graph data strcuture- ${graphData.edge} - ${graphData.node}`);
  await concereteDatabase.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
  concereteDatabase.driverInstance.close();
}


async function exportAllGraphData({
  api,
  targetPath = './test/asset/',
  fileName = 'graphData.exported.json',
  url = { protocol: 'bolt', hostname: 'localhost', port: 7687 },
  fixGraphData = true } =
{}) {var _node$edge;
  let concreteDatabaseBehavior = new _graphTraversal.Database.clientInterface({
    implementationList: { boltCypherModelAdapter: implementation.database.boltCypherModelAdapterFunction({ url, schemeReference: _graphTraversal.schemeReference }) },
    defaultImplementation: 'boltCypherModelAdapter' });

  let concereteDatabase = concreteDatabaseBehavior[_graphTraversal.Database.$.key.getter]();

  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  const exportPath = _path.default.normalize(_path.default.join(targetProjectRootPath, targetPath));
  let graphData = (_node$edge = { node: await concereteDatabase.getAllNode(), edge: await concereteDatabase.getAllEdge() }, JSON.stringify(_node$edge));

  if (!(0, _fs.existsSync)(exportPath)) (0, _fs.mkdirSync)(exportPath, { recursive: true });
  await _fs.promises.writeFile(_path.default.join(exportPath, fileName), graphData, { encoding: 'utf8', flag: 'w' });
  console.log(`• Created json file - ${_path.default.join(exportPath, fileName)}`);

  if (fixGraphData) await fixJSONData({ api, targetPath, exportedFileName: fileName, targetFileName: fileName, url });

  concereteDatabase.driverInstance.close();
}

async function exportSpecificGraphData({ api, targetPath = './test/asset/', fileName = 'specific.exported.json', url = { protocol: 'bolt', hostname: 'localhost', port: 7687 } } = {}) {var _node$edge2;
  let concreteDatabaseBehavior = new _graphTraversal.Database.clientInterface({
    implementationList: { boltCypherModelAdapter: implementation.database.boltCypherModelAdapterFunction({ url, schemeReference: _graphTraversal.schemeReference }) },
    defaultImplementation: 'boltCypherModelAdapter' });

  let concereteDatabase = concreteDatabaseBehavior[_graphTraversal.Database.$.key.getter]();

  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  const exportPath = _path.default.normalize(_path.default.join(targetProjectRootPath, targetPath));


  let nodeKeyArray = [];


  let nodeArray = [],
  edgeArray = [];


  for (let key of nodeKeyArray) nodeArray.push((await concereteDatabase.getNodeByKey({ key })));


  for (let node of nodeArray) {
    let queryResultArray = await concereteDatabase.getNodeConnection({ nodeID: node.identity });
    queryResultArray = queryResultArray.map(result => result.connection);
    edgeArray = [...edgeArray, ...queryResultArray];
  }

  edgeArray = edgeArray.filter(edge => nodeArray.some(node => node.identity == edge.start) && nodeArray.some(node => node.identity == edge.end));

  edgeArray = removeArrayDuplicateEdgeObject(edgeArray);

  let graphData = (_node$edge2 = { node: nodeArray, edge: edgeArray }, JSON.stringify(_node$edge2));
  await _fs.promises.writeFile(_path.default.join(exportPath, fileName), graphData, { encoding: 'utf8', flag: 'w' });
  console.log(`• Created json file - ${_path.default.join(exportPath, fileName)}`);
  concereteDatabase.driverInstance.close();
}




async function fixJSONData({ api, targetPath = './resource/', exportedFileName = 'fixed.exported.json', targetFileName = 'taskSequence.graphData.json' } = {}) {var _graphData;
  const targetProjectRootPath = api.project.configuration.configuration.directory.root;
  let graphData = require(_path.default.join(targetProjectRootPath, targetPath, targetFileName));


  graphData.node = graphData.node.map(item => {

    if (!item.properties.key) {
      console.log(`• Fixing node without key - ` + JSON.stringify(item));
      item.properties.key = uuidv4();
    }
    return item;
  });
  graphData.edge = graphData.edge.map(item => {

    if (!item.properties.key) {
      console.log(`• Fixing edge without key - ` + JSON.stringify(item));
      item.properties.key = uuidv4();
    }
    return item;
  });

  const exportPath = _path.default.normalize(_path.default.join(targetProjectRootPath, targetPath, exportedFileName));
  await _fs.promises.writeFile(exportPath, (_graphData = graphData, JSON.stringify(_graphData)), { encoding: 'utf8', flag: 'w' });
  console.log(`• Created json file - ${exportPath}`);
}

async function clearDatabase({ concereteDatabase, url = { protocol: 'bolt', hostname: 'localhost', port: 7687 } }) {
  if (!concereteDatabase) {
    let concreteDatabaseBehavior = new _graphTraversal.Database.clientInterface({
      implementationList: { boltCypherModelAdapter: implementation.database.boltCypherModelAdapterFunction({ url, schemeReference: _graphTraversal.schemeReference }) },
      defaultImplementation: 'boltCypherModelAdapter' });

    concereteDatabase = concreteDatabaseBehavior[_graphTraversal.Database.$.key.getter]();
  }


  const graphDBDriver = concereteDatabase.driverInstance;
  let session = await graphDBDriver.session();
  await session.run(`match (n) detach delete n`);
  console.log('• Database data cleared.');
  session.close();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,